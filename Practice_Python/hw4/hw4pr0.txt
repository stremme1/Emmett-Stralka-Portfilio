
The most preventable contributing factor to the bug's origins is the lack of communication between the developers and the testers. If the developers and testers had been communicating more effectively, the bug could have been found and fixed before the rocket took off. Setting a system in place to ensure that all software was up to date should have been a high priority. Software updates are tricky because they can change code, that might not have needed to be enhanced or altered.  Software updates could also introduce more cooks in the kitchen. I agree with this statement. Software is not a physical system, so it does not fail in the same way that a physical system does. When a physical system fails, it stops working completely. When software fails, it may still work, but it may not work correctly. 
